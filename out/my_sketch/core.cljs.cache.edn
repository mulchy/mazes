;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name my-sketch.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {step {:name my-sketch.core/step, :file "src/my_sketch/core.cljs", :line 5, :column 1, :end-line 5, :end-column 10, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 5, :column 6, :end-line 5, :end-column 10}}, edges {:name my-sketch.core/edges, :file "src/my_sketch/core.cljs", :line 8, :column 1, :end-line 8, :end-column 11, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 8, :column 6, :end-line 8, :end-column 11}}, sub-points {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 22, :column 7, :end-line 22, :end-column 17, :arglists (quote ([[x1 y1] [x2 y2]]))}, :name my-sketch.core/sub-points, :variadic false, :file "src/my_sketch/core.cljs", :end-column 17, :method-params ([p__6277 p__6278]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x1 y1] [x2 y2]]))}, edge-and-dir->point {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 37, :column 7, :end-line 37, :end-column 26, :arglists (quote ([[a b _ _] dir]))}, :name my-sketch.core/edge-and-dir->point, :variadic false, :file "src/my_sketch/core.cljs", :end-column 26, :method-params ([p__6286 dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[a b _ _] dir]))}, remove-invalid-edges {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 44, :column 7, :end-line 44, :end-column 27, :arglists (quote ([edge-map visited]))}, :name my-sketch.core/remove-invalid-edges, :variadic false, :file "src/my_sketch/core.cljs", :end-column 27, :method-params ([edge-map visited]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edge-map visited]))}, remove-edge {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 16, :column 7, :end-line 16, :end-column 18, :arglists (quote ([edges edge]))}, :name my-sketch.core/remove-edge, :variadic false, :file "src/my_sketch/core.cljs", :end-column 18, :method-params ([edges edge]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edges edge]))}, my-sketch {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 96, :column 14, :end-line 96, :end-column 23, :export true, :arglists (quote ([]))}, :name my-sketch.core/my-sketch, :variadic false, :file "src/my_sketch/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 67, :column 7, :end-line 67, :end-column 10, :arglists (quote ([initial-point edges]))}, :name my-sketch.core/run, :variadic false, :file "src/my_sketch/core.cljs", :end-column 10, :method-params ([initial-point edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([initial-point edges]))}, choose-edge {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 58, :column 7, :end-line 58, :end-column 18, :arglists (quote ([point visited])), :doc "randomly picks a wall to knock down"}, :name my-sketch.core/choose-edge, :variadic false, :file "src/my_sketch/core.cljs", :end-column 18, :method-params ([point visited]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point visited])), :doc "randomly picks a wall to knock down"}, dir->points {:name my-sketch.core/dir->points, :file "src/my_sketch/core.cljs", :line 19, :column 1, :end-line 19, :end-column 17, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 19, :column 6, :end-line 19, :end-column 17}}, add-points {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([[x1 y1] [x2 y2]]))}, :name my-sketch.core/add-points, :variadic false, :file "src/my_sketch/core.cljs", :end-column 17, :method-params ([p__6271 p__6272]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x1 y1] [x2 y2]]))}, move {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 24, :column 7, :end-line 24, :end-column 11, :arglists (quote ([point direction]))}, :name my-sketch.core/move, :variadic false, :file "src/my_sketch/core.cljs", :end-column 11, :method-params ([point direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point direction]))}, draw-grid {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 91, :column 7, :end-line 91, :end-column 16, :arglists (quote ([state]))}, :name my-sketch.core/draw-grid, :variadic false, :file "src/my_sketch/core.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, size {:name my-sketch.core/size, :file "src/my_sketch/core.cljs", :line 6, :column 1, :end-line 6, :end-column 10, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 6, :column 6, :end-line 6, :end-column 10}}, get-edge-map {:protocol-inline nil, :meta {:file "/Users/ryanmulcahy/code/Clojure/my-sketch/src/my_sketch/core.cljs", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([[x y :as point]]))}, :name my-sketch.core/get-edge-map, :variadic false, :file "src/my_sketch/core.cljs", :end-column 19, :method-params ([p__6283]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y :as point]]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:fn :W :size :middleware :host :E :host-id :no-start :draw :S :N}, :order [:N :S :E :W :host :size :middleware :draw :no-start :fn :host-id]}, :doc nil}